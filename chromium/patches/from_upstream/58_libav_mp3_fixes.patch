From fe66116e6899304ba1df6401ad14269d30607b76 Mon Sep 17 00:00:00 2001
From: Dale Curtis <dalecurtis@chromium.org>
Date: Wed, 15 Feb 2012 15:41:43 -0800
Subject: [PATCH] Cherry pick libav fixes for mp3 checked bitstream seeking.

http://git.libav.org/?p=libav.git;a=commitdiff;h=464f26889c99f194d112fcf1197795d341fad38b
http://git.libav.org/?p=libav.git;a=commitdiff;h=03fafdec82a4dbe0cf1a7d4d3bb59c42d5019941

BUG=none
TEST=Seek mp3 multiple times, check for garbled sound at start.
---
 chromium/patches/README   |    4 ++++
 libavcodec/mpegaudiodec.c |   35 ++++++++++++++++++++---------------
 2 files changed, 24 insertions(+), 15 deletions(-)

diff --git a/chromium/patches/README b/chromium/patches/README
index edd2f1e..632496d 100644
--- a/chromium/patches/README
+++ b/chromium/patches/README
@@ -16,6 +16,10 @@ https://chromiumcodereview.appspot.com/9373002/ - <multiple files>
   testing after roll to ea4037162fb0afa871e5312a7b23c828d2b85066.  See code
   review at https://chromiumcodereview.appspot.com/9373002/ for more details.
 
+e5f286810650ff97bf93b8ba9f6fa7c75f4468ec - libavcodec/mpegaudiodec.c
+  dalecurtis: Cherry-pick of fixes from libav for checked bitstream reader
+  issues with seeking.
+
 
 Patches still existing from the pre-GIT workflow:
 
diff --git a/libavcodec/mpegaudiodec.c b/libavcodec/mpegaudiodec.c
index ea77158..c3b5886 100644
--- a/libavcodec/mpegaudiodec.c
+++ b/libavcodec/mpegaudiodec.c
@@ -1376,6 +1376,7 @@ static int mp_decode_layer3(MPADecodeContext *s)
     }
 
     if (!s->adu_mode) {
+        int skip;
         const uint8_t *ptr = s->gb.buffer + (get_bits_count(&s->gb)>>3);
         int extrasize = av_clip(get_bits_left(&s->gb) >> 3, 0, EXTRABYTES);
         assert((get_bits_count(&s->gb) & 7) == 0);
@@ -1389,25 +1390,29 @@ static int mp_decode_layer3(MPADecodeContext *s)
 #if !UNCHECKED_BITSTREAM_READER
         s->gb.size_in_bits_plus8 += extrasize * 8;
 #endif
-        skip_bits_long(&s->gb, 8*(s->last_buf_size - main_data_begin));
+        s->last_buf_size <<= 3;
+        for (gr = 0; gr < nb_granules && (s->last_buf_size >> 3) < main_data_begin; gr++) {
+            for (ch = 0; ch < s->nb_channels; ch++) {
+                g = &s->granules[ch][gr];
+                s->last_buf_size += g->part2_3_length;
+                memset(g->sb_hybrid, 0, sizeof(g->sb_hybrid));
+            }
+        }
+        skip = s->last_buf_size - 8 * main_data_begin;
+        if (skip >= s->gb.size_in_bits && s->in_gb.buffer) {
+            skip_bits_long(&s->in_gb, skip - s->gb.size_in_bits);
+            s->gb           = s->in_gb;
+            s->in_gb.buffer = NULL;
+        } else {
+            skip_bits_long(&s->gb, skip);
+        }
+    } else {
+        gr = 0;
     }
 
-    for (gr = 0; gr < nb_granules; gr++) {
+    for (; gr < nb_granules; gr++) {
         for (ch = 0; ch < s->nb_channels; ch++) {
             g = &s->granules[ch][gr];
-            if (get_bits_count(&s->gb) < 0) {
-                av_log(s->avctx, AV_LOG_DEBUG, "mdb:%d, lastbuf:%d skipping granule %d\n",
-                       main_data_begin, s->last_buf_size, gr);
-                skip_bits_long(&s->gb, g->part2_3_length);
-                memset(g->sb_hybrid, 0, sizeof(g->sb_hybrid));
-                if (get_bits_count(&s->gb) >= s->gb.size_in_bits && s->in_gb.buffer) {
-                    skip_bits_long(&s->in_gb, get_bits_count(&s->gb) - s->gb.size_in_bits);
-                    s->gb           = s->in_gb;
-                    s->in_gb.buffer = NULL;
-                }
-                continue;
-            }
-
             bits_pos = get_bits_count(&s->gb);
 
             if (!s->lsf) {
-- 
1.7.7.3

